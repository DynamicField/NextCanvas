<fluent:RibbonWindow
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:NextCanvas.Controls"
    xmlns:vm="clr-namespace:NextCanvas.ViewModels"
    xmlns:fluent="urn:fluent-ribbon" xmlns:converters="clr-namespace:NextCanvas.Converters"
    xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    xmlns:local1="clr-namespace:NextCanvas.Views"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
    xmlns:nextCanvas="clr-namespace:NextCanvas"
    xmlns:properties="clr-namespace:NextCanvas.Properties"
    x:Class="NextCanvas.Views.MainWindow"
    UseLayoutRounding="True" x:Name="Window"
    mc:Ignorable="d" ResizeBorderThickness="8" ResizeMode="CanResizeWithGrip"
    d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True, Type={x:Type vm:MainWindowViewModel}}"
    Title="NextCanvas" Height="720" Width="1202">
    <fluent:RibbonWindow.InputBindings>
        <KeyBinding Key="A" Modifiers="Control" Command="SelectAll"
                    CommandTarget="{Binding ElementName=Canvas, Mode=OneTime}" />
        <KeyBinding Key="Delete" Command="Delete" CommandTarget="{Binding ElementName=Canvas, Mode=OneTime}" />
    </fluent:RibbonWindow.InputBindings>
    <fluent:RibbonWindow.Resources>
        <converters:ToolToConstructorConverter x:Key="ToolToConstructorConverter" />
        <converters:BoolToOrientationConverter x:Key="BoolToOrientationConverter" />
        <converters:IsEqualToConverter x:Key="IsEqualToConverter" />
        <converters:OrConverter x:Key="OrConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <Style TargetType="fluent:Button">
            <Setter Property="Icon" Value="{Binding LargeIcon, RelativeSource={RelativeSource Self}}"></Setter>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="OpacityOnHover">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="1" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <InkCanvasEditingMode x:Key="NullMode">Select</InkCanvasEditingMode>
    </fluent:RibbonWindow.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition>
                <RowDefinition.Style>
                    <Style TargetType="RowDefinition">
                        <Setter Property="Height" Value="1*"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsRibbonOnTop, Source={x:Static nextCanvas:SettingsManager.Settings}}" Value="True">
                                <Setter Property="Height" Value="Auto"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </RowDefinition.Style>
            </RowDefinition>
            <RowDefinition>
                <RowDefinition.Style>
                    <Style TargetType="RowDefinition">
                        <Setter Property="Height" Value="Auto"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsRibbonOnTop, Source={x:Static nextCanvas:SettingsManager.Settings}}" Value="True">
                                <Setter Property="Height" Value="1*"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </RowDefinition.Style>
            </RowDefinition>
        </Grid.RowDefinitions>
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" x:Name="ScrollParent">
            <ScrollViewer.Style>
                <Style TargetType="ScrollViewer">
                    <Setter Property="Grid.Row" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsRibbonOnTop, Source={x:Static nextCanvas:SettingsManager.Settings}}" Value="True">
                            <Setter Property="Grid.Row" Value="1"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ScrollViewer.Style>
            <Grid>
                <Button Content="Extend" Panel.ZIndex="1" VerticalAlignment="Center"
                            HorizontalAlignment="Right"
                            Padding="5,2" Margin="2" Opacity="0.2" Style="{StaticResource OpacityOnHover}"
                            Command="{Binding ExtendPageCommand}" CommandParameter="Right"
                            Click="ResizeCanvasEvent" />
                <Canvas Width="{Binding CurrentDocument.SelectedPage.Width}"
                            Height="{Binding CurrentDocument.SelectedPage.Height}">
                    <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                    <local:NextInkCanvas
                            x:Name="Canvas"
                            EditingMode="{Binding SelectedTool.Mode, Mode=TwoWay, UpdateSourceTrigger=Explicit, TargetNullValue={StaticResource NullMode}, FallbackValue={StaticResource NullMode}}"
                            EraserShapeDP="{Binding SelectedTool.EraserShape}"
                            Width="{Binding CurrentDocument.SelectedPage.Width}"
                            Height="{Binding CurrentDocument.SelectedPage.Height}"
                            Strokes="{Binding CurrentDocument.SelectedPage.Strokes, UpdateSourceTrigger=PropertyChanged}"
                            Canvas.Left="0" Canvas.Top="0"
                            UseCustomCursorDP="{Binding SelectedTool.UseCursor}"
                            ItemsSource="{Binding CurrentDocument.SelectedPage.Elements}"
                            Cursor="{Binding SelectedTool.Cursor}"
                            DefaultDrawingAttributes="{Binding SelectedTool.DrawingAttributes}"
                            ScrollViewerReferent="{Binding Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}"
                            SelectedItems="{Binding SelectedElements}"
                            CustomStrokeInvocator="{Binding SelectedTool, Converter={StaticResource ToolToConstructorConverter}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanging">
                                <ei:CallMethodAction TargetObject="{Binding}" MethodName="SelectionHandler" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </local:NextInkCanvas>
                </Canvas>
                <Button Content="Extend" Panel.ZIndex="1" VerticalAlignment="Bottom"
                            HorizontalAlignment="Center"
                            Padding="5,2" Margin="2" Opacity="0.6" Style="{StaticResource OpacityOnHover}"
                            Command="{Binding ExtendPageCommand}" CommandParameter="Bottom"
                            Click="ResizeCanvasEvent" />
            </Grid>
        </ScrollViewer>
        <fluent:Ribbon Panel.ZIndex="2" Margin="0,0,0,0" x:Name="Ribbon" Grid.Row="1" CanCustomizeRibbon="True">
            <fluent:Ribbon.Style>
                <Style TargetType="fluent:Ribbon">
                    <Setter Property="Grid.Row" Value="1"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsRibbonOnTop, Source={x:Static nextCanvas:SettingsManager.Settings}}" Value="True">
                            <Setter Property="Grid.Row" Value="0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </fluent:Ribbon.Style>
            <fluent:Ribbon.Menu>
                <fluent:ApplicationMenu Header="{x:Static properties:RibbonResources.File}">
                    <fluent:ApplicationMenu.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="CornerRadius" Value="0" />
                        </Style>
                    </fluent:ApplicationMenu.Resources>
                    <fluent:ApplicationMenu.RightPaneContent>
                        <TextBlock>
                                <Run Text="Thing" />
                        </TextBlock>
                    </fluent:ApplicationMenu.RightPaneContent>
                    <fluent:MenuItem Header="{x:Static properties:RibbonResources.File_New}" Click="NewButton_Click"
                                         Icon="/NextCanvas;component/Images/Menu/NewFile.png" />
                    <fluent:MenuItem Header="{x:Static properties:RibbonResources.File_Open}" Icon="/NextCanvas;component/Images/Menu/Open.png" x:Name="Open"
                                         Click="Open_Click"
                                         Command="{Binding OpenCommand}"
                                         CommandParameter="{Binding ProgressProvider, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local1:MainWindow}}}" />
                    <fluent:MenuItem Header="{x:Static properties:RibbonResources.File_Save}" Icon="/NextCanvas;component/Images/Menu/Save.png" x:Name="Save"
                                         Click="Save_Click"
                                         Command="{Binding SaveCommand}"
                                         CommandParameter="{Binding ProgressProvider, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local1:MainWindow}}}" />
                    <!-- Events are executed before commands so ye -->
                    <fluent:MenuItem Header="{x:Static properties:RibbonResources.File_SaveAs}" Icon="/NextCanvas;component/Images/Menu/SaveAs.png"
                                         IsSplited="True" Click="Save_Click"
                                         Command="{Binding SaveCommand}"
                                         CommandParameter="{Binding ProgressProvider, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local1:MainWindow}}}">
                        <!-- TODO: Create SaveAs command but this will require some undo redo oof things and since for some reason inexperienced people always use save as (why tho?)... -->
                        <fluent:MenuItem Header="Save as that format..." Description="something something"
                                             Icon="/NextCanvas;component/Images/Menu/Save.png" />
                    </fluent:MenuItem>
                    <Separator />
                    <fluent:MenuItem Header="{x:Static properties:RibbonResources.File_Settings}" Click="SettingsClick"
                                         Icon="/NextCanvas;component/Images/Menu/Settings.png" />
                </fluent:ApplicationMenu>
            </fluent:Ribbon.Menu>
            <fluent:Ribbon.ToolBarItems>
                <fluent:Button Size="Small" Icon="/NextCanvas;component/Images/Ribbon/Shared/NewPage-Small.png"
                                   Command="{Binding NewPageCommand}" />
                <fluent:Button Size="Small" Icon="/NextCanvas;component/Images/Ribbon/Shared/Arrow.png"
                                   Command="{Binding PreviousPageCommand}" />
                <TextBlock Text="{Binding PageDisplayText}" VerticalAlignment="Center" />
                <fluent:Button Size="Small" Icon="/NextCanvas;component/Images/Ribbon/Shared/Arrow.png"
                                   Command="{Binding NextPageCommand}" RenderTransformOrigin="0.5,0.5">
                    <fluent:Button.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="-1" />
                        </TransformGroup>
                    </fluent:Button.RenderTransform>
                </fluent:Button>
            </fluent:Ribbon.ToolBarItems>
            <fluent:RibbonTabItem Header="{x:Static properties:RibbonResources.Home}" IsSelected="True" 
                                  ReduceOrder="Selection, Pages, Pages, Pages">
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Home_Selection}" x:Name="Selection">
                    <fluent:SplitButton Header="{x:Static properties:RibbonResources.Home_Select}"
                                            LargeIcon="/NextCanvas;component/Images/Ribbon/Home/Select.png"
                                            SizeDefinition="Large" x:Name="SelectButton" IsCheckable="True"
                                            IsChecked="{Binding IsSelectTool, Mode=TwoWay}">
                        <fluent:MenuItem Header="{x:Static properties:RibbonResources.Home_SelectAll}"
                                             Icon="/NextCanvas;component/Images/Ribbon/Home/SelectAll.png"
                                             SizeDefinition="large, large, small"
                                             Command="ApplicationCommands.SelectAll"
                                             CommandTarget="{Binding ElementName=Canvas, Mode=OneWay}" IsEnabled="True" />
                    </fluent:SplitButton>

                    <fluent:Button SizeDefinition="middle, small, small" Header="{x:Static properties:RibbonResources.Home_Copy}"
                                       Icon="/NextCanvas;component/Images/Ribbon/Shared/Copy-Small.png"
                                       x:Name="CopyButton" Command="ApplicationCommands.Copy"
                                       CommandTarget="{Binding ElementName=Canvas, Mode=OneWay}" />
                    <fluent:Button SizeDefinition="middle, small, small" Header="{x:Static properties:RibbonResources.Home_Cut}"
                                       Icon="/NextCanvas;component/Images/Ribbon/Shared/Cut-Small.png"
                                       x:Name="CutButton" Command="ApplicationCommands.Cut"
                                       CommandTarget="{Binding ElementName=Canvas, Mode=OneWay}" />
                    <fluent:Button SizeDefinition="middle, small, small" Header="{x:Static properties:RibbonResources.Home_Paste}"
                                       Icon="/NextCanvas;component/Images/Ribbon/Shared/Paste-Small.png"
                                       x:Name="PasteButton" Command="ApplicationCommands.Paste"
                                       CommandTarget="{Binding ElementName=Canvas, Mode=OneWay}" />
                    <fluent:Button Header="{x:Static properties:RibbonResources.Home_DeleteSelection}" LargeIcon="{StaticResource DeleteSelection}"
                                       SizeDefinition="large"
                                       Command="ApplicationCommands.Delete"
                                       CommandTarget="{Binding ElementName=Canvas, Mode=OneWay}"
                                       Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Self}}" />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Home_BasicTools}" x:Name="Tools" Icon="{Binding SelectedTool.LargeIcon}" >
                    <local:BindableInRibbonGallery
                            ItemsSource="{Binding Tools, TargetNullValue={x:Static DependencyProperty.UnsetValue}}"
                            Selectable="True"
                            SelectedItem="{Binding SelectedTool}"
                            Header="Tool..." ResizeMode="Both" MinItemsInRow="3"
                            Orientation="Horizontal" 
                            ItemWidth="54" GroupBy="GroupName" ItemHeight="58"
                            SizeDefinition="Large, Large, Large" MaxItemsInRowFix="{Binding MaxToolsDisplayed, Source={x:Static nextCanvas:SettingsManager.Settings}, Mode=TwoWay}">
                        <fluent:InRibbonGallery.ItemContainerStyle>
                            <Style TargetType="fluent:GalleryItem">
                                <Setter Property="Margin" Value="-1"/>
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu d:DataContext="{d:DesignInstance vm:ToolViewModel}">
                                            <MenuItem Header="{x:Static properties:RibbonResources.ToolGallery_EditItem}"
                                                      Command="{Binding ModifyCommand}"
                                                      CommandParameter="{x:Static local1:MainWindow.ModifyProvider}" />
                                            <!-- x reference is broken for some reason-->
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasDemo}" Value="True">
                                        <Setter Property="ToolTip">
                                            <Setter.Value>
                                                <ToolTip d:DataContext="{d:DesignInstance vm:ToolViewModel}">
                                                    <InkCanvas VerticalAlignment="Top"
                                                                   Height="{Binding DemoHeight}" EditingMode="None"
                                                                   Strokes="{Binding DemoStroke}"
                                                                   Width="{Binding DemoWidth}" />
                                                </ToolTip>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="ToolTipService.InitialShowDelay" Value="100" />
                                        <Setter Property="ToolTipService.BetweenShowDelay" Value="75" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </fluent:InRibbonGallery.ItemContainerStyle>
                        <fluent:InRibbonGallery.ItemTemplate>
                            <DataTemplate DataType="{x:Type vm:ToolViewModel}">
                                <Grid>
                                    <StackPanel>
                                        <Image Source="{Binding LargeIcon}" Width="24" />
                                        <Viewbox StretchDirection="DownOnly">
                                            <TextBlock Text="{Binding Name}" TextWrapping="Wrap" TextAlignment="Center"
                                                       FontSize="10" Width="50" />
                                        </Viewbox>
                                    </StackPanel>
                                    <Rectangle VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="4" Panel.ZIndex="3" Visibility="{Binding HasDemo, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Rectangle.Fill>
                                            <SolidColorBrush Color="{Binding DrawingAttributes.Color}"/>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>
                            </DataTemplate>
                        </fluent:InRibbonGallery.ItemTemplate>
                    </local:BindableInRibbonGallery>
                    <fluent:Button LargeIcon="/NextCanvas;component/Images/Ribbon/Home/Add.png"
                                       Header="{x:Static properties:RibbonResources.Home_CreateTool}" SizeDefinition="large" />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Home_ToolShape}">
                    <fluent:RibbonGroupBox.Visibility>
                        <MultiBinding Converter="{StaticResource OrConverter}">
                            <Binding Path="SelectedTool.HasSize" />
                            <Binding Path="SelectedTool.HasDemo" />
                        </MultiBinding>
                    </fluent:RibbonGroupBox.Visibility>
                    <StackPanel>
                        <StackPanel
                                Visibility="{Binding SelectedTool.HasSize, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Orientation="{Binding SelectedTool.HasDemo, Converter={StaticResource BoolToOrientationConverter}, Mode=OneWay}"
                                Margin="0,1,0,0">
                            <TextBlock HorizontalAlignment="Center" Margin="1" FontSize="12"
                                           VerticalAlignment="Center" Text="{x:Static properties:RibbonResources.Home_Size}"/>
                            <fluent:Spinner FontSize="12" Minimum="1" Maximum="18000" x:Name="Size" MinWidth="70"
                                                Value="{Binding SelectedTool.UniformSize}"
                                                Increment="1" Interval="18">
                                <fluent:Spinner.Style>
                                    <Style TargetType="{x:Type fluent:Spinner}">
                                        <Setter Property="Margin" Value="-8,0,0,0" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedTool.HasDemo}" Value="True">
                                                <Setter Property="Margin" Value="-5,0,0,0" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </fluent:Spinner.Style>
                            </fluent:Spinner>
                        </StackPanel>
                        <Border BorderBrush="Gray" BorderThickness="1" Margin="1,1,0,0"
                                    Visibility="{Binding SelectedTool.HasDemo, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Viewbox StretchDirection="Both" Width="90" Height="44">
                                <InkCanvas VerticalAlignment="Top" Height="{Binding SelectedTool.DemoHeight}"
                                               EditingMode="None" x:Name="Preview"
                                               Strokes="{Binding SelectedTool.DemoStroke}"
                                               Width="{Binding SelectedTool.DemoWidth}" Background="White" />
                            </Viewbox>
                        </Border>
                    </StackPanel>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Home_Colors}"
                                       Visibility="{Binding SelectedTool.Group.HasGotColor, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <fluent:ColorGallery SelectedColorChanged="ColorGallery_SelectedColorChanged"
                                                 x:Name="ColorGallery" 
                                                 SelectedColor="{Binding SelectedTool.DrawingAttributes.Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                 IsMoreColorsButtonVisible="True" IsNoColorButtonVisible="False"
                                                 Mode="ThemeColors" ChipHeight="15" ChipWidth="15"
                                                 IsAutomaticColorButtonVisible="False">
                            <fluent:ColorGallery.Resources>
                                <Style TargetType="{x:Type fluent:GroupSeparatorMenuItem}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </Style>
                            </fluent:ColorGallery.Resources>
                        </fluent:ColorGallery>
                    </ScrollViewer>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Pages" x:Name="Pages"
                                           Icon="/NextCanvas;component/Images/Ribbon/Home/NewPage-Big.png"
                                           IsLauncherVisible="True" LauncherClick="PagesTabLauncherClick">
                    <fluent:Button Header="{x:Static properties:RibbonResources.Home_GoLeft}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Shared/Arrow.png"
                                       Command="{Binding PreviousPageCommand}" SizeDefinition="Large, Middle, Small" />
                    <fluent:Button Header="{x:Static properties:RibbonResources.Home_NewPage}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Home/NewPage-Big.png"
                                       Command="{Binding NewPageCommand}" SizeDefinition="Large, Middle, Small" />
                    <fluent:Button Header="{x:Static properties:RibbonResources.Home_DeletePage}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Home/Delete.png"
                                       Command="{Binding DeletePageCommand}" SizeDefinition="Large, Middle, Small" 
                                       CommandParameter="{Binding DialogProvider, ElementName=Window}"/>
                    <fluent:Button Header="{x:Static properties:RibbonResources.Home_GoRight}" Command="{Binding NextPageCommand}"
                                       SizeDefinition="Large, Small, Small">
                        <fluent:Button.LargeIcon>
                            <Image Source="/NextCanvas;component/Images/Ribbon/Shared/Arrow.png"
                                       RenderTransformOrigin="0.5,0.5">
                                <Image.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleY="1" ScaleX="-1" />
                                        <SkewTransform AngleY="0" AngleX="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Image.RenderTransform>
                            </Image>
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="{x:Static properties:RibbonResources.Insert}">
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Insert_Text}">
                    <fluent:Button Header="{x:Static properties:RibbonResources.Insert_TextBox}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Insert/NewTextBox.png"
                                       Click="InsertClick_GoToHome"
                                       Command="{Binding CreateTextBoxCommand}" />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Images">
                    <fluent:Button Header="{x:Static properties:RibbonResources.Insert_Image}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Insert/NewImage.png"
                                       Click="NewImage_Click"
                                       Command="{Binding CreateImageCommand}" />
                    <fluent:Button Header="{x:Static properties:RibbonResources.Insert_Screenshot}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Insert/Screenshot.png"
                                       Click="InsertClick_GoToHome"
                                       Command="{Binding CreateScreenshotCommand}"
                                       CommandParameter="{Binding ScreenshotProvider, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local1:MainWindow}}}" />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Insert_Web}">
                    <fluent:Button Header="{x:Static properties:RibbonResources.Insert_WebBrowser}"
                                       LargeIcon="/NextCanvas;component/Images/Ribbon/Insert/WebBrowser.png"
                                       Command="{Binding CreateWebBrowserCommand}"
                                       CommandParameter="{x:Static local1:MainWindow.ModifyProvider}" />
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="{x:Static properties:RibbonResources.Page}">
                <fluent:RibbonGroupBox Header="{x:Static properties:RibbonResources.Page_Dimensions}">
                    <Grid Margin="4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <TextBlock HorizontalAlignment="Right" Text="{x:Static properties:RibbonResources.Page_Width}"/>
                        <fluent:Spinner Grid.Row="0" Grid.Column="1" Increment="25"
                                            Value="{Binding CurrentDocument.SelectedPage.Width}" Margin="0,0,0,5" />
                        <TextBlock Grid.Row="1" Grid.Column="0" HorizontalAlignment="Right" Text="{x:Static properties:RibbonResources.Page_Height}"/>
                        <fluent:Spinner Grid.Row="1" Grid.Column="1" Increment="25"
                                            Value="{Binding CurrentDocument.SelectedPage.Height}" />
                    </Grid>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="Debug">
                <fluent:RibbonGroupBox Header="Stylus">
                    <fluent:Button LargeIcon="pack://application:,,,/NextCanvas;component/Images/NextCanvas.png"
                                       Header="Stylus Debug" Click="DebugStylusXD_Click" x:Name="DebugStylusXd" />
                    <fluent:Button LargeIcon="pack://application:,,,/NextCanvas;component/Images/Menu/Open.png"
                                       Header="Multi Canvas" Click="Button_Click" />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Bugs">
                    <fluent:Button LargeIcon="pack://application:,,,/NextCanvas;component/Images/Ribbon/Debug/Log.png"
                                       Header="Log viewer" Click="LogViewerClick"></fluent:Button>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>
    </Grid>
</fluent:RibbonWindow>